import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
mnist = fetch_openml("mnist_784", version=1)
X, y = mnist.data, mnist.target.astype(np.uint8)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train = X_train.to_numpy().reshape(-1, 28, 28, 1)
X_test = X_test.to_numpy().reshape(-1, 28, 28, 1)
X_train = X_train / 255.0
X_test = X_test / 255.0
model = keras.Sequential([
    keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Conv2D(64, (3, 3), activation='relu'),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=5)
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"Test accuracy: {test_acc * 100:.2f}%")
for i in range(3):
    plt.figure()
    plt.imshow(X_test[i].reshape(28, 28), cmap=plt.cm.gray_r)
    plt.title(f"True: {y_test.iloc[i]}, Predicted: {np.argmax(predictions[i])}")
    plt.show()
predictions = model.predict(X_test)
plt.figure(figsize=(8, 6))
plt.scatter(y_test.astype(int), np.argmax(predictions, axis=1), s=5, alpha=0.5)
plt.plot([0, 9], [0, 9], '--', c='red')  # Diagonal line for perfect predictions
plt.xlabel('True Labels')
plt.ylabel('Predicted Labels')
plt.title('Scatter Plot of True vs. Predicted Labels (CNN)')
plt.grid(True)
